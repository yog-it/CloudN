@using Azure.Storage.Blobs;
@using Azure.Storage.Blobs.Models;
@using Oqtane.Modules.Controls
@using YogIT.LargeAzFileUpload.Shared.Models
@using Microsoft.AspNetCore.Components.Forms
@using System.IO;

@namespace YogIT.LargeAzFileUpload
@inherits ModuleBase
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Index> Localizer
@inject ISettingService SettingService

<form @ref="form" class="@(validated ? " was-validated" : "needs-validation" )" novalidate>
    @if (string.IsNullOrEmpty(SettingService.GetSetting(ModuleState.Settings, "StorageName", "")))
    {
        <div class="alert alert-info" role="alert">@Localizer["Message.ConfigureModule"]</div>
    }
    else
    {
        if (_containers == null)
        {
            <div>Loading...</div>
        }
        else
        {
            <div class="container">
                @if (_canChangeContainer)
                {
                    <div class="row mb-3">
                        <Label Class="col-lg-2" For="containerSelect" HelpText="Please select the container in the Azure Storage Account you would like to upload to." ResourceKey="SelectContainer">Select Container: </Label>
                        <div class="col-lg-10">
                            <select id="containerSelect" @bind="_selectedContainer" class="form-select w-75">
                                @foreach (var container in _containers)
                                {
                                    <option value="@container">@container</option>
                                }
                            </select>
                        </div>
                    </div>                    
                }
                <div class="row mb-3">
                    <Label Class="col-lg-2 mb-2" For="name" HelpText="Select the file you would like to upload" ResourceKey="File">Select File: </Label>
                    <div class="col-lg-10">
                        <InputFile @key=(_inputFileId) class="form-control" multiple OnChange="@GetFileList" />
                    </div>
                </div>
            </div>
            <button type="button" class="btn btn-success" @onclick="UploadFiles">@Localizer["Upload"]</button>
            if (_uploading)
            {
                <div>Uploading...</div>
                <div class="progress">
                    <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100" style="width: @uploadProgress%"></div>
                </div>
            }
        }
    }
</form>

@code {

    private ElementReference form;
    private bool validated = false;
    private List<string> _containers = new List<string>();
    private string _selectedContainer;
    private bool _uploading = false;
    private List<IBrowserFile> _files;
    private string _inputFileId = Guid.NewGuid().ToString();
    private int uploadProgress;
    private BlobServiceClient blobServiceClient;
    private bool _canChangeContainer = false;

    public override List<Resource> Resources => new List<Resource>()
    {
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" },
        new Resource { ResourceType = ResourceType.Script, Url = ModulePath() + "Module.js" }
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // get the containers
            if (!string.IsNullOrEmpty(SettingService.GetSetting(ModuleState.Settings, "StorageName", "")))
            {
                string connectionString = $"DefaultEndpointsProtocol=https;AccountName={SettingService.GetSetting(ModuleState.Settings, "StorageName", "")};AccountKey={SettingService.GetSetting(ModuleState.Settings, "StorageKey", "")};EndpointSuffix=core.windows.net";
                blobServiceClient = new BlobServiceClient(connectionString);
                await LoadContainersAsync();
            }
            if (!string.IsNullOrEmpty(SettingService.GetSetting(ModuleState.Settings, "AllowContainerChange", "")))
            {
                _canChangeContainer = bool.Parse(SettingService.GetSetting(ModuleState.Settings, "AllowContainerChange", ""));
            }
            if (!string.IsNullOrEmpty(SettingService.GetSetting(ModuleState.Settings, "DefaultContainer", "")))
            {
                _selectedContainer = SettingService.GetSetting(ModuleState.Settings, "DefaultContainer", "");
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading: {Error}", ex.Message);
            AddModuleMessage(Localizer["Message.LoadError"], MessageType.Error);
        }
    }

    private void GetFileList(InputFileChangeEventArgs e)
    {
        _files = e.GetMultipleFiles().ToList();
    }

    private async Task LoadContainersAsync()
    {
        await foreach (BlobContainerItem containerItem in blobServiceClient.GetBlobContainersAsync())
        {
            _containers.Add(containerItem.Name);
        }
    }

    private async Task UploadFiles()
    {
        try
        {
            validated = true;
            _uploading = true;
            var interop = new Oqtane.UI.Interop(JSRuntime);
            if (await interop.FormValid(form))
            {
                foreach (var file in _files)
                {

                    BlobContainerClient containerClient = blobServiceClient.GetBlobContainerClient(_selectedContainer);
                    BlobClient blobClient = containerClient.GetBlobClient(file.Name);

                    using (var stream = file.OpenReadStream(2147463648))
                    {
                        var progressHandler = new Progress<long>(progress =>
                        {
                            uploadProgress = (int)((progress * 100) / stream.Length);
                            StateHasChanged();
                        });
                        await blobClient.UploadAsync(stream, new Azure.Storage.Blobs.Models.BlobUploadOptions
                        {
                            ProgressHandler = progressHandler
                        });
                    }
                }
                _inputFileId = Guid.NewGuid().ToString();
                await logger.LogInformation("Uploaded File");
                AddModuleMessage(Localizer["Message.UploadComplete"], MessageType.Success);
            }
            else
            {
                AddModuleMessage(Localizer["Message.UploadValidation"], MessageType.Warning);
            }
            _uploading = false;
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Uploading File: {Error}", ex.Message);
            AddModuleMessage(Localizer["Message.UploadError"], MessageType.Error);
        }
    }
}