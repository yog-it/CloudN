@namespace YogIT.LargeAzFileUpload
@inherits ModuleBase
@using Azure.Storage.Blobs;
@using Azure.Storage.Blobs.Models;
@inject ISettingService SettingService
@inject IStringLocalizer<Settings> Localizer

<div class="container">
    <div class="row mb-1 align-items-center form-floating">
        <Label Class="col-sm-3" For="maxFileSize" HelpText="The maximum file size allowed for users to upload" ResourceKey="MaxFileSize">Max File Size: </Label>
        <div class="col-sm-9">
            <label for="maxFileSize">@displayMaxFileSize</label>
            <input id="maxFileSize" type="range" class="form-range w-90" @bind="@_maxFileSize" min="268435456" max="107374182400" step="268435456" />
        </div>
    </div>
    <div class="row mb-1 align-items-center">
        <Label Class="col-sm-3" For="storageName" HelpText="Enter the Azure Storage Name" ResourceKey="StorageName">Storage Name: </Label>
        <div class="col-sm-9">
            <input id="storageName" type="text" class="form-control" @bind="@_storageName" />
        </div>
    </div>
    <div class="row mb-1 align-items-center">
        <Label Class="col-sm-3" For="storageKey" HelpText="Enter the Azure Storage Name" ResourceKey="StorageKey">Storage Key: </Label>
        <div class="col-sm-9">
            <input id="storageKey" type="text" class="form-control" @bind="@_storageKey" />
        </div>
    </div>
    @if (!string.IsNullOrEmpty(_storageKey) && !string.IsNullOrEmpty(_storageKey))
    {
        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="containerSelect" HelpText="Please select the container in the Azure Storage Account that you would like to be the default container used." ResourceKey="SelectContainer">Default Container: </Label>
            <div class="col-sm-9 input-group">
                <select id="containerSelect" @bind="@_defaultContainer" class="form-select w-50">
                    @foreach (var container in _containers)
                    {
                        <option value="@container">@container</option>
                    }
                </select>
                <div class="input-group-text">
                    Users can change containers&nbsp;<input class="form-check-input mt-0" type="checkbox" value="" aria-label="Can users change from the defult container?" @bind="@_allowContainerChange">
                </div>
            </div>
        </div>
    }
</div>

@code {
    public override string Title => "LargeAzFileUpload Settings";

    string _storageName;
    string _storageKey;
    string _defaultContainer;
    bool _allowContainerChange;
    double _maxFileSize;

    List<string> _containers = new List<string>();
    private BlobServiceClient blobServiceClient;
    private bool isContainerListLoaded = false;
    private string displayMaxFileSize
    {
        get
        {
            return (_maxFileSize / 1024 / 1024 / 1024).ToString("F2") + "GB";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Dictionary<string, string> settings = await SettingService.GetModuleSettingsAsync(ModuleState.ModuleId);
            double.TryParse(SettingService.GetSetting(settings, "MaxFileSize", "268435456"), out _maxFileSize);
            _storageName = SettingService.GetSetting(settings, "StorageName", "");
            _storageKey = SettingService.GetSetting(settings, "StorageKey", "");
            _defaultContainer = SettingService.GetSetting(settings, "DefaultContainer", "");
            bool.TryParse(SettingService.GetSetting(settings, "AllowContainerChange", ""), out _allowContainerChange);
            await LoadContainersAsync();
        }
        catch (Exception ex)
        {
            ModuleInstance.AddModuleMessage(ex.Message, MessageType.Error);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await LoadContainersAsync();
    }

    private async Task LoadContainersAsync()
    {

        // get the containers
        if (!string.IsNullOrEmpty(_storageKey) && !string.IsNullOrEmpty(_storageKey) && !isContainerListLoaded)
        {
            string connectionString = $"DefaultEndpointsProtocol=https;AccountName={_storageName};AccountKey={_storageKey};EndpointSuffix=core.windows.net";
            blobServiceClient = new BlobServiceClient(connectionString);
            await foreach (BlobContainerItem containerItem in blobServiceClient.GetBlobContainersAsync())
            {
                _containers.Add(containerItem.Name);
            }
            StateHasChanged();
            isContainerListLoaded = true;
        }
    }

    public async Task UpdateSettings()
    {
        try
        {
            Dictionary<string, string> settings = await SettingService.GetModuleSettingsAsync(ModuleState.ModuleId);
            SettingService.SetSetting(settings, "MaxFileSize", _maxFileSize.ToString());
            SettingService.SetSetting(settings, "StorageName", _storageName);
            SettingService.SetSetting(settings, "StorageKey", _storageKey);
            SettingService.SetSetting(settings, "DefaultContainer", _defaultContainer);
            SettingService.SetSetting(settings, "AllowContainerChange", _allowContainerChange.ToString());
            await SettingService.UpdateModuleSettingsAsync(settings, ModuleState.ModuleId);
        }
        catch (Exception ex)
        {
            ModuleInstance.AddModuleMessage(ex.Message, MessageType.Error);
        }
    }

}
